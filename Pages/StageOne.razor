@page "/stageone"
@using Best_Hackathon_Codiseea.Models;
@using Best_Hackathon_Codiseea.Data;
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject TeamTaskService teamTaskService
@attribute [Authorize]
<h3>StageOne</h3>
<h6>
    La acest nivel veti avea parte de sarcini simple de logica , in chenarul din partea stanga postati codul sursa
    in chenarul din dreapta rezultatul , daca sunteti siguri , dati click pe submit . o data ce ati dat click sistemul va
    verifica daca raspunsul este corect sau nu . Aveti dreptul la 3 greselui , dupa sarcina se considera neindeplinita si veti
    primi alta . In total la dispozitie aveti 10 sarcini , pentru a trece la urmatorul nivel trebuie sa realizati 6 din ele.
    Daca nu puteti rezolva o sarcina aveti posibilitatea sa treceti la urmatorea apasand butonul "Urmatoarea sarcina"
</h6>

<br />
@if (teamTasks == null)
{
    <p><em>Loading..</em></p>
}
else
{
    <div class="card">
    <div class="card-body">
        <h4>Status : @value</h4>

        <hr />


        Task : Pe pagina bestchisinau de instagram sunt ascunse bucăți de cheie.
        <br />
        Sarcina:
        <br />
        Găsiți cheia.

        <div class="row">
            <div class="col-9">
                <input type="password" class="form-control" id="exampleInputPassword1" @bind="@UserAnswer">
            </div>
            <div class="col-3">
                <button type="submit" class="btn btn-primary" @onclick="@CheckAnswer" disabled=@ButtonDisabled>Submit</button>
            </div>
        </div>

    </div>
</div>
}

@code {
    private int okAnswers = 3;
    private int koAnswers = 2;

    [Parameter]
    public string CorrectAnswer { get; set; } = "BESTChisinauhackathonCodiseeadecembrie";
    public string UserAnswer { get; set; }

    public bool ButtonDisabled = false;

    string taskId;
    string teamName;
    public string value = "";
    string points;
    //date;

    List<TeamTask> teamTasks;

    TeamTask teamTask;

    protected async Task load()
    {
        teamTasks = await teamTaskService.GetTasksAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task CheckAnswer()
    {
        if (UserAnswer.Length >= 0)
        {
            ButtonDisabled = true;
            if (UserAnswer.ToLower() == CorrectAnswer.ToLower())
            {
                value = "Correct";
                TeamTask s = new TeamTask()
                {
                    TeamName = httpContextAccessor.HttpContext.User.Identity.Name,
                    Value = value,
                    Points = "10",
                    Date = DateTime.Now
                };

                await teamTaskService.InsertTeamTaskAsync(s);
                await load();
            }
            else
            {
                value = "Incorrect";
            }
        }
        else
        {
            ButtonDisabled = false;
            value = "None";
        }
    }
}
