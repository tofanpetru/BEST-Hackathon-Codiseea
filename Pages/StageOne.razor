@page "/stageone"
@using Best_Hackathon_Codiseea.Models;
@using Best_Hackathon_Codiseea.Data;
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject TeamTaskService teamTaskService
@attribute [Authorize]
<h3>StageOne</h3>
<h6>
    Bun venit în prima etapă.
</h6>
<p>
    La această etapă aţi acumulat :
    <span class="text-sm-center text-danger">

    </span> puncte
</p>

<br />
<br />
@if (teamTasks1 == null && teamTasks2 == null && teamTasks3 == null && teamTasks4 == null && teamTasks5 == null)
{
    <p><em>Loading..</em></p>
}
else
{
    <div class="card">
        <div class="card-body">
            <h4>
                1. Status :
                @foreach (var item in teamTasks1)
                {
                    @if (item.Value == "Correct")
                    {
                        <span class="text-success">@item.Value</span>
                        HideAnswer = true;
                    }
                    else
                    {
                        HideAnswer = false;
                    }
                }
            </h4>
            <hr />
            <div hidden="@HideAnswer">
                Task : Pe pagina bestchisinau de instagram sunt ascunse bucăți de cheie.
                <br />
                Sarcina:
                <br />
                Găsiți cheia.

                <div class="row">
                    <div class="col-9">
                        <input class="form-control" id="exampleInputPassword1" @bind="@UserAnswer">
                    </div>
                    <div class="col-3">
                        <button type="submit" class="btn btn-primary" @onclick="() => CheckAnswer(1)">Submit</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
    <br />

    <div class="card">
        <div class="card-body">
            <h4>
                2. Status :
                @foreach (var item in teamTasks2)
                {
                    @if (item.Value == "Correct")
                    {
                        <span class="text-success">@item.Value</span>
                        HideAnswer2 = true;
                    }
                    else
                    {
                        HideAnswer2 = false;
                    }
                }
            </h4>
            <hr />
            <div hidden="@HideAnswer2">
                Task : Hei hei hei.
                <br />
                Sarcina:
                <br />
                Găsiți cheia.

                <div class="row">
                    <div class="col-9">
                        <input class="form-control" id="exampleInputPassword1" @bind="@UserAnswer2">
                    </div>
                    <div class="col-3">
                        <button type="submit" class="btn btn-primary" @onclick="() => CheckAnswer(2)">Submit</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string CorrectAnswer { get; set; } = "BESTChisinauhackathonCodiseeadecembrie";
    [Parameter]
    public string CorrectAnswer2 { get; set; } = "test2";

    public string UserAnswer { get; set; }
    public string UserAnswer2 { get; set; }

    public bool HideAnswer = false;
    public bool HideAnswer2 = false;

    string taskId;
    string teamName;
    public string value = "";
    string points;
    //date;

    public int sum = 0;

    List<TeamTask> teamTasks1;
    List<TeamTask> teamTasks2;
    List<TeamTask> teamTasks3;
    List<TeamTask> teamTasks4;
    List<TeamTask> teamTasks5;

    List<TeamTask> totalPoints;

    TeamTask teamTask;

    protected async Task load()
    {
        var teamName = httpContextAccessor.HttpContext.User.Identity.Name;
        teamTasks1 = await teamTaskService.GetTasksAsync(teamName, "1");
        teamTasks2 = await teamTaskService.GetTasksAsync(teamName, "2");
        teamTasks3 = await teamTaskService.GetTasksAsync(teamName, "3");
        teamTasks4 = await teamTaskService.GetTasksAsync(teamName, "4");
        teamTasks5 = await teamTaskService.GetTasksAsync(teamName, "5");
        totalPoints = await teamTaskService.GetTotalPointsAsync(teamName);

    }

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task CheckAnswer(int VerifyTask)
    {
        switch (VerifyTask)
        {
            case 1:
                if (UserAnswer.Length >= 0)
                {
                    if (UserAnswer.ToLower() == CorrectAnswer.ToLower())
                    {
                        TeamTask s = new TeamTask()
                        {
                            ID = Guid.NewGuid().ToString(),
                            TeamName = httpContextAccessor.HttpContext.User.Identity.Name,
                            Value = "Correct",
                            Points = 10,
                            ItemNumber = "1",
                            Date = DateTime.Now,
                        };

                        await teamTaskService.InsertTeamTaskAsync(s);
                        await load();
                    }
                    else
                    {
                        value = "Incorrect";
                    }
                }
                break;
            case 2:
                if (UserAnswer2.Length >= 0)
                {
                    if (UserAnswer2.ToLower() == CorrectAnswer2.ToLower())
                    {
                        TeamTask s = new TeamTask()
                        {
                            ID = Guid.NewGuid().ToString(),
                            TeamName = httpContextAccessor.HttpContext.User.Identity.Name,
                            Value = "Correct",
                            Points = 10,
                            ItemNumber = "2",
                            Date = DateTime.Now,
                        };

                        await teamTaskService.InsertTeamTaskAsync(s);
                        await load();
                    }
                }
                break;
            default:
                value = "False";
                break;
        }
    }
}
