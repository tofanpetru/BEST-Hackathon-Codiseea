@page "/panel"
@using Best_Hackathon_Codiseea.Models;
@using Best_Hackathon_Codiseea.Data;
@inject TeamTaskService teamTaskService

@if (globalCorrectAnswers == null || numberOfTeams == null)
{
    <p><em>Loading</em></p>
}
else
{
    <div class="container">
        <h3 class="container text-center">Welcome to Odisee Hackathon</h3>
        <br />
        <AuthorizeView>
            <Authorized>
                <p>Salutări și bine ați ați venit la acest <strong>BEST Hackathon: Codiseea!</strong> Această secțiune reprezintă un scurt ghid pentru evenimentul ce va urma și ce etape trebuie îndeplinite. </p>
                <br />
                <p>
                    <strong>Soluţiile pe github:</strong><br />
                    La acest hackathon veți avea de a face cu mai multe probleme. Veți primi câte o problemă și cu cât mai departe ajungeți cu atât sarcinile vor deveni mai complexe. Pentru a putea urmări progresul echipelor și în final să determinăm câștigătorul, fiecare echipă va crea un repozitoriu privat pe github( poate fi gestionat de un singur membru al echipei). După creare se vor respecta următoarele reguli pentru aranjarea soluțiilor: <br />
                    1. Petru fiecare sarcină se va crea o mapă separată în mapa repozitoriului, în care va fi adăugat codul sursă utilizat la rezolvarea problemei. Imaginile și alte fișiere extra din sarcină nu trebuie adăugate. <br />
                    2. Pe tot parcursul evenimentului repozitoriul va fi privat pentru ca alte echipe să nu vadă soluțiile străine. La finalul evenimentului repozitoriul va fi făcut public și organizatorilor le va fi trimis un link la acesta pentru verificare și apreciere. <br />
                    3. Commiturile pot fi făcute local și sincronizate abia la sfârșitul evenimentului.
                </p>
                <br />
                <p>
                    @{
                        if (globalCorrectAnswers.Count == 0)
                        {
                            <span>Fii primul care va face prima soluţie!</span>
                        }
                        else
                        {
                            <strong>Grăbeşte-te! deja au fost încărcate <span class="text-danger">@globalCorrectAnswers.Count</span> soluţie/soluţii corecte</strong>
                        }
                    }
                </p>
                <hr />
                @*
                Trebuie de facut query-ul pentru determinarea tuturor echipelor care au minim o solutie corecta
           <p> @numberOfTeams.Count   team number</p>
        <p>@globalCorrectAnswers.Count  glabal answers</p>
        <p>@AllUserProgress</p>
                *@
                <h5>Aici puteți vedea progresul global al evenimentului</h5>
                <hr />
                <br />
                <div class="progress">
                    <div class="progress-bar progress-bar-striped bg-info" role="progressbar" style="width: @GlobalProgress()" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"></div>
                    <div class="progress-bar progress-bar-striped bg-danger" role="progressbar" style="width: @Remaning()" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <p><strong>Legenda:</strong></p>
                <p>
                    - Albastru semnifică progresul general al evenimentului<br />
                    - Roşu semnifică progresul rămas
                </p>
            </Authorized>
            <NotAuthorized>
                <p>Please log in to access the site content</p>
            </NotAuthorized>
        </AuthorizeView>
    </div>
}


@code{
    List<TeamTask> globalCorrectAnswers;
    List<TeamTask> numberOfTeams;

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        globalCorrectAnswers = await teamTaskService.GetGlobalCorrectAnswersAsync();
        numberOfTeams = await teamTaskService.GetNumberOfTeamsWhoAnswer();
    }
    public double AllUserProgress;

    public string Remaning()
    {
        return ((Convert.ToString(100 - AllUserProgress)) + "%");
    }

    public string GlobalProgress()
    {
        int TotalEventTasks = 5;
        double precent = 0;

        if(numberOfTeams.Count !=0)
        {
            precent = (((globalCorrectAnswers.Count / numberOfTeams.Count) * 100) / TotalEventTasks);
            AllUserProgress = precent;
            return (Convert.ToString(precent) + "%");
        }
        else
        {
            return ("0%");
        }
    }
}